
blinky.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000528  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  0000059c  2**0
                  ALLOC
  2 .debug_aranges 000000b0  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000010f  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000bda  00000000  00000000  0000075b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003c5  00000000  00000000  00001335  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000a0a  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000100  00000000  00000000  00002104  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000031b  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000089f  00000000  00000000  0000251f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000158  00000000  00000000  00002dbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		c = pgm_read_byte(s++);
		if (!c) break;
		morse_character(c);
	}
	print("\n");
}
   0:	a9 c0       	rjmp	.+338    	; 0x154 <__ctors_end>
}

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
   2:	00 00       	nop
   4:	c4 c0       	rjmp	.+392    	; 0x18e <__bad_interrupt>
   6:	00 00       	nop
   8:	c2 c0       	rjmp	.+388    	; 0x18e <__bad_interrupt>
   a:	00 00       	nop
   c:	c0 c0       	rjmp	.+384    	; 0x18e <__bad_interrupt>
   e:	00 00       	nop
  10:	be c0       	rjmp	.+380    	; 0x18e <__bad_interrupt>
  12:	00 00       	nop
  14:	bc c0       	rjmp	.+376    	; 0x18e <__bad_interrupt>
  16:	00 00       	nop
  18:	ba c0       	rjmp	.+372    	; 0x18e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b8 c0       	rjmp	.+368    	; 0x18e <__bad_interrupt>
  1e:	00 00       	nop
  20:	b6 c0       	rjmp	.+364    	; 0x18e <__bad_interrupt>
  22:	00 00       	nop
  24:	b4 c0       	rjmp	.+360    	; 0x18e <__bad_interrupt>
  26:	00 00       	nop
  28:	de c0       	rjmp	.+444    	; 0x1e6 <__vector_10>
  2a:	00 00       	nop
  2c:	1c c1       	rjmp	.+568    	; 0x266 <__vector_11>
  2e:	00 00       	nop
  30:	ae c0       	rjmp	.+348    	; 0x18e <__bad_interrupt>
  32:	00 00       	nop
  34:	ac c0       	rjmp	.+344    	; 0x18e <__bad_interrupt>
  36:	00 00       	nop
  38:	aa c0       	rjmp	.+340    	; 0x18e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a8 c0       	rjmp	.+336    	; 0x18e <__bad_interrupt>
  3e:	00 00       	nop
  40:	a6 c0       	rjmp	.+332    	; 0x18e <__bad_interrupt>
  42:	00 00       	nop
  44:	a4 c0       	rjmp	.+328    	; 0x18e <__bad_interrupt>
  46:	00 00       	nop
  48:	a2 c0       	rjmp	.+324    	; 0x18e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a0 c0       	rjmp	.+320    	; 0x18e <__bad_interrupt>
  4e:	00 00       	nop
  50:	9e c0       	rjmp	.+316    	; 0x18e <__bad_interrupt>
  52:	00 00       	nop
  54:	9c c0       	rjmp	.+312    	; 0x18e <__bad_interrupt>
  56:	00 00       	nop
  58:	9a c0       	rjmp	.+308    	; 0x18e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	98 c0       	rjmp	.+304    	; 0x18e <__bad_interrupt>
  5e:	00 00       	nop
  60:	96 c0       	rjmp	.+300    	; 0x18e <__bad_interrupt>
  62:	00 00       	nop
  64:	94 c0       	rjmp	.+296    	; 0x18e <__bad_interrupt>
  66:	00 00       	nop
  68:	92 c0       	rjmp	.+292    	; 0x18e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	90 c0       	rjmp	.+288    	; 0x18e <__bad_interrupt>
  6e:	00 00       	nop
  70:	8e c0       	rjmp	.+284    	; 0x18e <__bad_interrupt>
  72:	00 00       	nop
  74:	8c c0       	rjmp	.+280    	; 0x18e <__bad_interrupt>
  76:	00 00       	nop
  78:	8a c0       	rjmp	.+276    	; 0x18e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	88 c0       	rjmp	.+272    	; 0x18e <__bad_interrupt>
  7e:	00 00       	nop
  80:	86 c0       	rjmp	.+268    	; 0x18e <__bad_interrupt>
  82:	00 00       	nop
  84:	84 c0       	rjmp	.+264    	; 0x18e <__bad_interrupt>
  86:	00 00       	nop
  88:	82 c0       	rjmp	.+260    	; 0x18e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	80 c0       	rjmp	.+256    	; 0x18e <__bad_interrupt>
  8e:	00 00       	nop
  90:	7e c0       	rjmp	.+252    	; 0x18e <__bad_interrupt>
  92:	00 00       	nop
  94:	7c c0       	rjmp	.+248    	; 0x18e <__bad_interrupt>
  96:	00 00       	nop

00000098 <descriptor_list>:
  98:	00 01 00 00 cf 00 12 00 02 00 00 e1 00 22 00 22     ............."."
  a8:	00 00 03 01 15 00 21 00 00 f3 00 09 00 03 00 00     ......!.........
  b8:	18 01 04 01 03 09 04 1c 01 14 02 03 09 04 32 01     ..............2.
  c8:	20                                                   

000000c9 <endpoint_config_table>:
  c9:	00 00 01 c1 26 00                                   ....&.

000000cf <device_descriptor>:
  cf:	12 01 00 02 00 00 00 20 c0 16 79 04 00 01 01 02     ....... ..y.....
  df:	00 01                                               ..

000000e1 <config1_descriptor>:
  e1:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
  f1:	00 00 09 21 11 01 00 01 22 15 00 07 05 83 03 20     ...!...."...... 
 101:	00 01                                               ..

00000103 <hid_report_descriptor>:
 103:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
 113:	09 75 81 02 c0                                      .u...

00000118 <string0>:
 118:	04 03 09 04                                         ....

0000011c <string1>:
 11c:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 12c:	6d 00 65 00 00 00                                   m.e...

00000132 <string2>:
 132:	20 03 59 00 6f 00 75 00 72 00 20 00 55 00 53 00      .Y.o.u.r. .U.S.
 142:	42 00 20 00 44 00 65 00 76 00 69 00 63 00 65 00     B. .D.e.v.i.c.e.
 152:	00 00                                               ..

00000154 <__ctors_end>:
 154:	11 24       	eor	r1, r1
 156:	1f be       	out	0x3f, r1	; 63
 158:	cf ef       	ldi	r28, 0xFF	; 255
 15a:	d0 e2       	ldi	r29, 0x20	; 32
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	cd bf       	out	0x3d, r28	; 61

00000160 <__do_copy_data>:
 160:	11 e0       	ldi	r17, 0x01	; 1
 162:	a0 e0       	ldi	r26, 0x00	; 0
 164:	b1 e0       	ldi	r27, 0x01	; 1
 166:	e8 e2       	ldi	r30, 0x28	; 40
 168:	f5 e0       	ldi	r31, 0x05	; 5
 16a:	00 e0       	ldi	r16, 0x00	; 0
 16c:	0b bf       	out	0x3b, r16	; 59
 16e:	02 c0       	rjmp	.+4      	; 0x174 <__do_copy_data+0x14>
 170:	07 90       	elpm	r0, Z+
 172:	0d 92       	st	X+, r0
 174:	a0 30       	cpi	r26, 0x00	; 0
 176:	b1 07       	cpc	r27, r17
 178:	d9 f7       	brne	.-10     	; 0x170 <__do_copy_data+0x10>

0000017a <__do_clear_bss>:
 17a:	11 e0       	ldi	r17, 0x01	; 1
 17c:	a0 e0       	ldi	r26, 0x00	; 0
 17e:	b1 e0       	ldi	r27, 0x01	; 1
 180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
 182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
 184:	a3 30       	cpi	r26, 0x03	; 3
 186:	b1 07       	cpc	r27, r17
 188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>
 18a:	02 d0       	rcall	.+4      	; 0x190 <main>
 18c:	cb c1       	rjmp	.+918    	; 0x524 <_exit>

0000018e <__bad_interrupt>:
 18e:	38 cf       	rjmp	.-400    	; 0x0 <__vectors>

00000190 <main>:
int main(void)
{
	unsigned char i;

	// set for 16 MHz clock, and make sure the LED is off
	CPU_PRESCALE(0);
 190:	80 e8       	ldi	r24, 0x80	; 128
 192:	80 93 61 00 	sts	0x0061, r24
 196:	10 92 61 00 	sts	0x0061, r1
	LED_CONFIG;
 19a:	56 9a       	sbi	0x0a, 6	; 10
	IO_CONFIG;
 19c:	38 98       	cbi	0x07, 0	; 7
	LED_OFF;
 19e:	5e 98       	cbi	0x0b, 6	; 11

	// initialize the USB, but don't want for the host to
	// configure.  The first several messages sent will be
	// lost because the PC hasn't configured the USB yet,
	// but we care more about blinking than debug messages!
	usb_init();
 1a0:	0b d0       	rcall	.+22     	; 0x1b8 <usb_init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a2:	20 e2       	ldi	r18, 0x20	; 32
 1a4:	3e e4       	ldi	r19, 0x4E	; 78
			morse_P(PSTR("SOS"));
			_delay_ms(1500);
		}
		morse_P(PSTR("DOES ANYBODY STILL KNOW MORSE CODE?"));
		_delay_ms(4000);*/
		if (PINC & (1<<0)) {
 1a6:	30 9b       	sbis	0x06, 0	; 6
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <main+0x1e>
			LED_ON;
 1aa:	5e 9a       	sbi	0x0b, 6	; 11
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <main+0x20>
		} else {
			LED_OFF;
 1ae:	5e 98       	cbi	0x0b, 6	; 11
 1b0:	c9 01       	movw	r24, r18
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x22>
 1b6:	f7 cf       	rjmp	.-18     	; 0x1a6 <main+0x16>

000001b8 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 1b8:	81 e8       	ldi	r24, 0x81	; 129
 1ba:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
 1be:	80 ea       	ldi	r24, 0xA0	; 160
 1c0:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 1c4:	86 e1       	ldi	r24, 0x16	; 22
 1c6:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 1c8:	09 b4       	in	r0, 0x29	; 41
 1ca:	00 fe       	sbrs	r0, 0
 1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 1ce:	80 e9       	ldi	r24, 0x90	; 144
 1d0:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 1d4:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 1d8:	10 92 00 01 	sts	0x0100, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 1dc:	8c e0       	ldi	r24, 0x0C	; 12
 1de:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 1e2:	78 94       	sei
}
 1e4:	08 95       	ret

000001e6 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 1f4:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 1f8:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 1fc:	98 2f       	mov	r25, r24
 1fe:	83 ff       	sbrs	r24, 3
 200:	0f c0       	rjmp	.+30     	; 0x220 <__vector_10+0x3a>
		UENUM = 0;
 202:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 20c:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 210:	82 e2       	ldi	r24, 0x22	; 34
 212:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 216:	88 e0       	ldi	r24, 0x08	; 8
 218:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 21c:	10 92 00 01 	sts	0x0100, r1
        }
	if (intbits & (1<<SOFI)) {
 220:	92 ff       	sbrs	r25, 2
 222:	1a c0       	rjmp	.+52     	; 0x258 <__vector_10+0x72>
		if (usb_configuration) {
 224:	80 91 00 01 	lds	r24, 0x0100
 228:	88 23       	and	r24, r24
 22a:	b1 f0       	breq	.+44     	; 0x258 <__vector_10+0x72>
			t = debug_flush_timer;
 22c:	80 91 01 01 	lds	r24, 0x0101
			if (t) {
 230:	88 23       	and	r24, r24
 232:	91 f0       	breq	.+36     	; 0x258 <__vector_10+0x72>
				debug_flush_timer = -- t;
 234:	81 50       	subi	r24, 0x01	; 1
 236:	80 93 01 01 	sts	0x0101, r24
				if (!t) {
 23a:	88 23       	and	r24, r24
 23c:	69 f4       	brne	.+26     	; 0x258 <__vector_10+0x72>
					UENUM = DEBUG_TX_ENDPOINT;
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	80 93 e9 00 	sts	0x00E9, r24
 244:	02 c0       	rjmp	.+4      	; 0x24a <__vector_10+0x64>
					while ((UEINTX & (1<<RWAL))) {
						UEDATX = 0;
 246:	10 92 f1 00 	sts	0x00F1, r1
			t = debug_flush_timer;
			if (t) {
				debug_flush_timer = -- t;
				if (!t) {
					UENUM = DEBUG_TX_ENDPOINT;
					while ((UEINTX & (1<<RWAL))) {
 24a:	80 91 e8 00 	lds	r24, 0x00E8
 24e:	85 fd       	sbrc	r24, 5
 250:	fa cf       	rjmp	.-12     	; 0x246 <__vector_10+0x60>
						UEDATX = 0;
					}
					UEINTX = 0x3A;
 252:	8a e3       	ldi	r24, 0x3A	; 58
 254:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	0b b6       	in	r0, 0x3b	; 59
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	2f 93       	push	r18
 276:	3f 93       	push	r19
 278:	4f 93       	push	r20
 27a:	5f 93       	push	r21
 27c:	6f 93       	push	r22
 27e:	7f 93       	push	r23
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
 284:	af 93       	push	r26
 286:	bf 93       	push	r27
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 290:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 294:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 298:	83 ff       	sbrs	r24, 3
 29a:	2c c1       	rjmp	.+600    	; 0x4f4 <__vector_11+0x28e>
                bmRequestType = UEDATX;
 29c:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 2a0:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 2a4:	80 91 f1 00 	lds	r24, 0x00F1
 2a8:	a8 2f       	mov	r26, r24
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
                wValue |= (UEDATX << 8);
 2ac:	20 91 f1 00 	lds	r18, 0x00F1
 2b0:	92 2f       	mov	r25, r18
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	a8 2b       	or	r26, r24
 2b6:	b9 2b       	or	r27, r25
                wIndex = UEDATX;
 2b8:	80 91 f1 00 	lds	r24, 0x00F1
 2bc:	68 2f       	mov	r22, r24
 2be:	70 e0       	ldi	r23, 0x00	; 0
                wIndex |= (UEDATX << 8);
 2c0:	20 91 f1 00 	lds	r18, 0x00F1
 2c4:	92 2f       	mov	r25, r18
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	68 2b       	or	r22, r24
 2ca:	79 2b       	or	r23, r25
                wLength = UEDATX;
 2cc:	80 91 f1 00 	lds	r24, 0x00F1
 2d0:	c8 2f       	mov	r28, r24
 2d2:	d0 e0       	ldi	r29, 0x00	; 0
                wLength |= (UEDATX << 8);
 2d4:	20 91 f1 00 	lds	r18, 0x00F1
 2d8:	92 2f       	mov	r25, r18
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	c8 2b       	or	r28, r24
 2de:	d9 2b       	or	r29, r25
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 2e0:	82 ef       	ldi	r24, 0xF2	; 242
 2e2:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 2e6:	36 30       	cpi	r19, 0x06	; 6
 2e8:	09 f0       	breq	.+2      	; 0x2ec <__vector_11+0x86>
 2ea:	56 c0       	rjmp	.+172    	; 0x398 <__vector_11+0x132>
 2ec:	2f e9       	ldi	r18, 0x9F	; 159
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	a9 01       	movw	r20, r18
 2f2:	45 50       	subi	r20, 0x05	; 5
 2f4:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 2f6:	f9 01       	movw	r30, r18
 2f8:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 2fa:	85 91       	lpm	r24, Z+
 2fc:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 2fe:	8a 17       	cp	r24, r26
 300:	9b 07       	cpc	r25, r27
 302:	e1 f4       	brne	.+56     	; 0x33c <__vector_11+0xd6>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 304:	fa 01       	movw	r30, r20
 306:	85 91       	lpm	r24, Z+
 308:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 30a:	86 17       	cp	r24, r22
 30c:	97 07       	cpc	r25, r23
 30e:	b1 f4       	brne	.+44     	; 0x33c <__vector_11+0xd6>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 310:	9a 01       	movw	r18, r20
 312:	2e 5f       	subi	r18, 0xFE	; 254
 314:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 316:	f9 01       	movw	r30, r18
 318:	65 91       	lpm	r22, Z+
 31a:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 31c:	2e 5f       	subi	r18, 0xFE	; 254
 31e:	3f 4f       	sbci	r19, 0xFF	; 255
 320:	f9 01       	movw	r30, r18
 322:	24 91       	lpm	r18, Z+
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 324:	ce 01       	movw	r24, r28
 326:	cf 3f       	cpi	r28, 0xFF	; 255
 328:	d1 05       	cpc	r29, r1
 32a:	19 f0       	breq	.+6      	; 0x332 <__vector_11+0xcc>
 32c:	10 f0       	brcs	.+4      	; 0x332 <__vector_11+0xcc>
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	42 2f       	mov	r20, r18
 334:	82 17       	cp	r24, r18
 336:	58 f4       	brcc	.+22     	; 0x34e <__vector_11+0xe8>
 338:	48 2f       	mov	r20, r24
 33a:	09 c0       	rjmp	.+18     	; 0x34e <__vector_11+0xe8>
 33c:	29 5f       	subi	r18, 0xF9	; 249
 33e:	3f 4f       	sbci	r19, 0xFF	; 255
 340:	49 5f       	subi	r20, 0xF9	; 249
 342:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	20 3d       	cpi	r18, 0xD0	; 208
 348:	3f 07       	cpc	r19, r31
 34a:	a9 f6       	brne	.-86     	; 0x2f6 <__vector_11+0x90>
 34c:	d3 c0       	rjmp	.+422    	; 0x4f4 <__vector_11+0x28e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 34e:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 350:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 354:	28 2f       	mov	r18, r24
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	c9 01       	movw	r24, r18
 35a:	85 70       	andi	r24, 0x05	; 5
 35c:	90 70       	andi	r25, 0x00	; 0
 35e:	89 2b       	or	r24, r25
 360:	b9 f3       	breq	.-18     	; 0x350 <__vector_11+0xea>
				if (i & (1<<RXOUTI)) return;	// abort
 362:	22 fd       	sbrc	r18, 2
 364:	ca c0       	rjmp	.+404    	; 0x4fa <__vector_11+0x294>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 366:	34 2f       	mov	r19, r20
 368:	41 32       	cpi	r20, 0x21	; 33
 36a:	08 f0       	brcs	.+2      	; 0x36e <__vector_11+0x108>
 36c:	30 e2       	ldi	r19, 0x20	; 32
 36e:	23 2f       	mov	r18, r19
 370:	cb 01       	movw	r24, r22
 372:	06 c0       	rjmp	.+12     	; 0x380 <__vector_11+0x11a>
				for (i = n; i; i--) {
 374:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	e4 91       	lpm	r30, Z+
 37a:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 37e:	21 50       	subi	r18, 0x01	; 1
 380:	22 23       	and	r18, r18
 382:	c1 f7       	brne	.-16     	; 0x374 <__vector_11+0x10e>
 384:	63 0f       	add	r22, r19
 386:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 388:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 38a:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 38e:	44 23       	and	r20, r20
 390:	f9 f6       	brne	.-66     	; 0x350 <__vector_11+0xea>
 392:	30 32       	cpi	r19, 0x20	; 32
 394:	e9 f2       	breq	.-70     	; 0x350 <__vector_11+0xea>
 396:	b1 c0       	rjmp	.+354    	; 0x4fa <__vector_11+0x294>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 398:	35 30       	cpi	r19, 0x05	; 5
 39a:	61 f4       	brne	.+24     	; 0x3b4 <__vector_11+0x14e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 39c:	8e ef       	ldi	r24, 0xFE	; 254
 39e:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 3a2:	80 91 e8 00 	lds	r24, 0x00E8
 3a6:	80 ff       	sbrs	r24, 0
 3a8:	fc cf       	rjmp	.-8      	; 0x3a2 <__vector_11+0x13c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 3aa:	8a 2f       	mov	r24, r26
 3ac:	80 68       	ori	r24, 0x80	; 128
 3ae:	80 93 e3 00 	sts	0x00E3, r24
 3b2:	a3 c0       	rjmp	.+326    	; 0x4fa <__vector_11+0x294>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 3b4:	39 30       	cpi	r19, 0x09	; 9
 3b6:	31 f5       	brne	.+76     	; 0x404 <__vector_11+0x19e>
 3b8:	44 23       	and	r20, r20
 3ba:	09 f0       	breq	.+2      	; 0x3be <__vector_11+0x158>
 3bc:	9b c0       	rjmp	.+310    	; 0x4f4 <__vector_11+0x28e>
			usb_configuration = wValue;
 3be:	a0 93 00 01 	sts	0x0100, r26
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 3c2:	8e ef       	ldi	r24, 0xFE	; 254
 3c4:	80 93 e8 00 	sts	0x00E8, r24
 3c8:	89 ec       	ldi	r24, 0xC9	; 201
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	21 e0       	ldi	r18, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 3ce:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 3d2:	fc 01       	movw	r30, r24
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	e4 91       	lpm	r30, Z+
				UECONX = en;
 3d8:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 3dc:	ee 23       	and	r30, r30
 3de:	69 f0       	breq	.+26     	; 0x3fa <__vector_11+0x194>
					UECFG0X = pgm_read_byte(cfg++);
 3e0:	ac 01       	movw	r20, r24
 3e2:	4f 5f       	subi	r20, 0xFF	; 255
 3e4:	5f 4f       	sbci	r21, 0xFF	; 255
 3e6:	fc 01       	movw	r30, r24
 3e8:	84 91       	lpm	r24, Z+
 3ea:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 3ee:	ca 01       	movw	r24, r20
 3f0:	01 96       	adiw	r24, 0x01	; 1
 3f2:	fa 01       	movw	r30, r20
 3f4:	34 91       	lpm	r19, Z+
 3f6:	30 93 ed 00 	sts	0x00ED, r19
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 3fa:	2f 5f       	subi	r18, 0xFF	; 255
 3fc:	25 30       	cpi	r18, 0x05	; 5
 3fe:	39 f7       	brne	.-50     	; 0x3ce <__vector_11+0x168>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 400:	8e e1       	ldi	r24, 0x1E	; 30
 402:	4d c0       	rjmp	.+154    	; 0x49e <__vector_11+0x238>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 404:	38 30       	cpi	r19, 0x08	; 8
 406:	61 f4       	brne	.+24     	; 0x420 <__vector_11+0x1ba>
 408:	40 38       	cpi	r20, 0x80	; 128
 40a:	09 f0       	breq	.+2      	; 0x40e <__vector_11+0x1a8>
 40c:	73 c0       	rjmp	.+230    	; 0x4f4 <__vector_11+0x28e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 40e:	80 91 e8 00 	lds	r24, 0x00E8
 412:	80 ff       	sbrs	r24, 0
 414:	fc cf       	rjmp	.-8      	; 0x40e <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 416:	80 91 00 01 	lds	r24, 0x0100
 41a:	80 93 f1 00 	sts	0x00F1, r24
 41e:	1b c0       	rjmp	.+54     	; 0x456 <__vector_11+0x1f0>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 420:	33 23       	and	r19, r19
 422:	e9 f4       	brne	.+58     	; 0x45e <__vector_11+0x1f8>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 424:	80 91 e8 00 	lds	r24, 0x00E8
 428:	80 ff       	sbrs	r24, 0
 42a:	fc cf       	rjmp	.-8      	; 0x424 <__vector_11+0x1be>

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 42c:	42 38       	cpi	r20, 0x82	; 130
 42e:	11 f0       	breq	.+4      	; 0x434 <__vector_11+0x1ce>
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0d c0       	rjmp	.+26     	; 0x44e <__vector_11+0x1e8>
				UENUM = wIndex;
 434:	60 93 e9 00 	sts	0x00E9, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
 438:	80 91 eb 00 	lds	r24, 0x00EB
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	25 e0       	ldi	r18, 0x05	; 5
 440:	96 95       	lsr	r25
 442:	87 95       	ror	r24
 444:	2a 95       	dec	r18
 446:	e1 f7       	brne	.-8      	; 0x440 <__vector_11+0x1da>
 448:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 44a:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
 44e:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 452:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 456:	8e ef       	ldi	r24, 0xFE	; 254
 458:	80 93 e8 00 	sts	0x00E8, r24
 45c:	4e c0       	rjmp	.+156    	; 0x4fa <__vector_11+0x294>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 45e:	31 30       	cpi	r19, 0x01	; 1
 460:	19 f0       	breq	.+6      	; 0x468 <__vector_11+0x202>
 462:	33 30       	cpi	r19, 0x03	; 3
 464:	09 f0       	breq	.+2      	; 0x468 <__vector_11+0x202>
 466:	46 c0       	rjmp	.+140    	; 0x4f4 <__vector_11+0x28e>
 468:	42 30       	cpi	r20, 0x02	; 2
 46a:	f1 f4       	brne	.+60     	; 0x4a8 <__vector_11+0x242>
 46c:	ab 2b       	or	r26, r27
 46e:	e1 f4       	brne	.+56     	; 0x4a8 <__vector_11+0x242>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 470:	26 2f       	mov	r18, r22
 472:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 474:	82 2f       	mov	r24, r18
 476:	81 50       	subi	r24, 0x01	; 1
 478:	84 30       	cpi	r24, 0x04	; 4
 47a:	b0 f4       	brcc	.+44     	; 0x4a8 <__vector_11+0x242>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 47c:	8e ef       	ldi	r24, 0xFE	; 254
 47e:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 482:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 486:	33 30       	cpi	r19, 0x03	; 3
 488:	a9 f1       	breq	.+106    	; 0x4f4 <__vector_11+0x28e>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 48a:	89 e1       	ldi	r24, 0x19	; 25
 48c:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <__vector_11+0x234>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	2a 95       	dec	r18
 49c:	e2 f7       	brpl	.-8      	; 0x496 <__vector_11+0x230>
 49e:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 4a2:	10 92 ea 00 	sts	0x00EA, r1
 4a6:	29 c0       	rjmp	.+82     	; 0x4fa <__vector_11+0x294>
				}
				return;
			}
		}
		#endif
		if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 4a8:	31 30       	cpi	r19, 0x01	; 1
 4aa:	21 f5       	brne	.+72     	; 0x4f4 <__vector_11+0x28e>
 4ac:	41 3a       	cpi	r20, 0xA1	; 161
 4ae:	11 f5       	brne	.+68     	; 0x4f4 <__vector_11+0x28e>
			if (wIndex == 0) {
 4b0:	67 2b       	or	r22, r23
 4b2:	01 f5       	brne	.+64     	; 0x4f4 <__vector_11+0x28e>
				len = wLength;
 4b4:	4c 2f       	mov	r20, r28
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4b6:	5e ef       	ldi	r21, 0xFE	; 254
			if (wIndex == 0) {
				len = wLength;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 4b8:	80 91 e8 00 	lds	r24, 0x00E8
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 4bc:	28 2f       	mov	r18, r24
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	c9 01       	movw	r24, r18
 4c2:	85 70       	andi	r24, 0x05	; 5
 4c4:	90 70       	andi	r25, 0x00	; 0
 4c6:	89 2b       	or	r24, r25
 4c8:	b9 f3       	breq	.-18     	; 0x4b8 <__vector_11+0x252>
					if (i & (1<<RXOUTI)) return;	// abort
 4ca:	22 fd       	sbrc	r18, 2
 4cc:	16 c0       	rjmp	.+44     	; 0x4fa <__vector_11+0x294>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 4ce:	94 2f       	mov	r25, r20
 4d0:	41 32       	cpi	r20, 0x21	; 33
 4d2:	08 f0       	brcs	.+2      	; 0x4d6 <__vector_11+0x270>
 4d4:	90 e2       	ldi	r25, 0x20	; 32
 4d6:	89 2f       	mov	r24, r25
 4d8:	03 c0       	rjmp	.+6      	; 0x4e0 <__vector_11+0x27a>
					for (i = n; i; i--) {
						UEDATX = 0;
 4da:	10 92 f1 00 	sts	0x00F1, r1
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 4de:	81 50       	subi	r24, 0x01	; 1
 4e0:	88 23       	and	r24, r24
 4e2:	d9 f7       	brne	.-10     	; 0x4da <__vector_11+0x274>
						UEDATX = 0;
					}
					len -= n;
 4e4:	49 1b       	sub	r20, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4e6:	50 93 e8 00 	sts	0x00E8, r21
					for (i = n; i; i--) {
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 4ea:	44 23       	and	r20, r20
 4ec:	29 f7       	brne	.-54     	; 0x4b8 <__vector_11+0x252>
 4ee:	90 32       	cpi	r25, 0x20	; 32
 4f0:	19 f3       	breq	.-58     	; 0x4b8 <__vector_11+0x252>
 4f2:	03 c0       	rjmp	.+6      	; 0x4fa <__vector_11+0x294>
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 4f4:	81 e2       	ldi	r24, 0x21	; 33
 4f6:	80 93 eb 00 	sts	0x00EB, r24
}
 4fa:	ff 91       	pop	r31
 4fc:	ef 91       	pop	r30
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	bf 91       	pop	r27
 504:	af 91       	pop	r26
 506:	9f 91       	pop	r25
 508:	8f 91       	pop	r24
 50a:	7f 91       	pop	r23
 50c:	6f 91       	pop	r22
 50e:	5f 91       	pop	r21
 510:	4f 91       	pop	r20
 512:	3f 91       	pop	r19
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0b be       	out	0x3b, r0	; 59
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <_exit>:
 524:	f8 94       	cli

00000526 <__stop_program>:
 526:	ff cf       	rjmp	.-2      	; 0x526 <__stop_program>
